#!/usr/bin/env bash
#=
exec julia --color=yes --threads=auto --project="${BASH_SOURCE[0]%/*}" "${BASH_SOURCE[0]}" "$@"
=#

print("Loading QuTiE...\r")
flush(stdout)
using ProgressMeter
requirements = quote
    using QuTiE
    using PhysicalConstants: CODATA2018, PhysicalConstant
    using DifferentialEquations
    using LaTeXStrings
    using Revise
    # using AlgebraOfGraphics
    # using Makie
    # try
    #     using GLMakie
    # catch
    #     using CairoMakie
    # end
end
@showprogress 0.5 "Loading QuTiE..." for requirement ∈ requirements.args
    @eval $requirement
end

for name ∈ names(CODATA2018, all=true)
    getproperty(CODATA2018, name) isa PhysicalConstant || continue
    @eval import PhysicalConstants.CODATA2018: $name
    synonym = Symbol(replace(string(name), r"_.+$"=>QuTiE.sub∘Base.Fix2(SubString, 2)))
    synonym == name && continue
    @eval const $synonym = $name
end

const ħ² = ħ^2
const 𝑖 = im
∜(x::ℝ) = x^(1/4)
const t = Time()

__revise_mode__ = :evalassign

function main(arguments::String...)
    length(arguments) == 1 && ARGS[1] ∉ ("-h", "--help", "-?") || error("Usage: ./$(normpath(PROGRAM_FILE)) spec.jl")
    includet(arguments[1])
    isdefined(Main, :ψ₀) || error("Must define initial state ψ₀")
    if isdefined(Main, :H) || isdefined(Main, :ℋ)
        if isdefined(Main, :H) && isdefined(Main, :ℋ)
            error("Cannot define both H and ℋ")
        end
        if isdefined(Main, :L) || isdefined(Main, :ℒ)
            error("Cannot define both Hamiltonian and Lagrangian")
        end
        if isdefined(Main, :ℋ)
            # Canonicalize:
            H = ℋ
        end
        # Hamiltonian formulation:
        # ψ = Observable([(
        #     filter_type(Space, op)
        #     |> unique
        #     |> Volume
        #     |> ones
        #     |> Base.Fix1(*, ψ₀)
        # )])
        # integrator = init(ODEProblem(-im*H/ħ, ψ[][begin], (0, ∞)))
    end
    if isdefined(Main, :L) || isdefined(Main, :ℒ)
        if isdefined(Main, :L) && isdefined(Main, :ℒ)
            error("Cannot define both L and ℒ")
        end
        if isdefined(Main, :H) || isdefined(Main, :ℋ)
            error("Cannot define both Lagrangian and Hamiltonian")
        end
        if isdefined(Main, :ℒ)
            # Canonicalize:
            L = ℒ
        end
        # v2: Lagrangian formulation
    end
    # if !isdefined(Main, :📊) && isdefined(Main, :output)
    #     📊 = output
    # end
    # if !isdefined(Main, :📊)
    #     📊 = visual(Wireframe)
    # end
    # if isdefined(Main, :x)
    #     # Cartesian default.
    #     if isdefined(Main, :y)
    #         if isdefined(Main, :z)
    #         end
    #     end
    # elseif isdefined(Main, :r) || isdefined(Main, :ρ)
    #     if isdefined(Main, :θ) && isdefined(Main, :φ)
    #         # Spherical default.
    #     elseif (isdefined(Main, :θ) || isdefined(Main, :φ)) && isdefined(Main, :z)
    #         #
    #     end
    # else
    # end
    # ψ = Observable(ψ₀*))
    # draw(data(ψ)*📊)
    # for (ψ, t) ∈ tuples(integrator)
    #     @show ψ, t
    # end
    ones(axes(H))
end

function julia_main()::Cint
    try
        main(ARGS...)
    catch
        Base.invokelatest(Base.display_error, Base.catch_stack())
        return 1
    end
    return 0
end

if abspath(PROGRAM_FILE) == @__FILE__
    main(ARGS...)
end

# Local Variables:
# mode: julia
# End:
