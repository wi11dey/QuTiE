#!/usr/bin/env bash
#=
exec julia --color=yes --project="${BASH_SOURCE[0]%/*}" "${BASH_SOURCE[0]}" "$@"
=#

print("Loading QuTiE...\r")
flush(stdout)
using ProgressMeter
requirements = quote
    using QuTiE
    using DifferentialEquations
    using AlgebraOfGraphics
    using LaTeXStrings
    # using Makie
    # try
    #     using GLMakie
    # catch
    #     using CairoMakie
    # end
    using Revise
    using PhysicalConstants: CODATA2018, PhysicalConstant
end
@showprogress 0.5 "Loading QuTiE..." for requirement ∈ requirements.args
    @eval $requirement
end

for name ∈ names(CODATA2018, all=true)
    @eval if CODATA2018.$name isa PhysicalConstant
        import PhysicalConstants.CODATA2018: $name
    end
end

const ħ² = ħ^2
const 𝑖 = im
∜(x::ℝ) = x^(1/4)

__revise_mode__ = :evalassign

function main(arguments::String...)
    length(arguments) == 1 && ARGS[1] ∉ ("-h", "--help", "-?") || error("Usage: ./$(normpath(PROGRAM_FILE)) spec.jl")
    includet(arguments[1])
    isdefined(:ψ₀) || error("Must define initial state ψ₀")
    if isdefined(:H) || isdefined(:ℋ)
        if isdefined(:H) && isdefined(:ℋ)
            error("Cannot define both H and ℋ")
        end
        if isdefined(:L) || isdefined(:ℒ)
            error("Cannot define both Hamiltonian and Lagrangian")
        end
        if isdefined(:ℋ)
            # Canonicalize:
            H = ℋ
        end
        # Hamiltonian formulation:
        ψ = Observable([(
            filter_type(Space, op)
            |> unique
            |> Volume
            |> ones
            |> Base.Fix1(*, ψ₀)
        )])
        integrator = init(ODEProblem(-im*H/ħ, ψ[][begin], (0, ∞)))
    end
    if isdefined(:L) || isdefined(:ℒ)
        if isdefined(:L) && isdefined(:ℒ)
            error("Cannot define both L and ℒ")
        end
        if isdefined(:H) || isdefined(:ℋ)
            error("Cannot define both Lagrangian and Hamiltonian")
        end
        if isdefined(:ℒ)
            # Canonicalize:
            L = ℒ
        end
        # v2: Lagrangian formulation
    end
    if !isdefined(:📊) && isdefined(:output)
        📊 = output
    end
    if !isdefined(:📊)
        📊 = visual(Wireframe)
    end
    if isdefined(:x)
        # Cartesian default.
        if isdefined(:y)
            if isdefined(:z)
            end
        end
    elseif isdefined(:r) || isdefined(:ρ)
        if isdefined(:θ) && isdefined(:φ)
            # Spherical default.
        elseif (isdefined(:θ) || isdefined(:φ)) && isdefined(:z)
            #
        end
    else
    end
    ψ = Observable(ψ₀*ones(axes(H)))
    draw(data(ψ)*📊)
    for (ψ, t) ∈ tuples(integrator)
        @show ψ, t
    end
end

function julia_main()::Cint
    try
        main(ARGS...)
    catch
        Base.invokelatest(Base.display_error, Base.catch_stack())
        return 1
    end
    return 0
end

if abspath(PROGRAM_FILE) == @__FILE__
    main(ARGS...)
end

# Local Variables:
# mode: julia
# End:
